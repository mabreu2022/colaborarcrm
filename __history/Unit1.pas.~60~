unit Unit1;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.StdCtrls,
  Vcl.ExtCtrls,
  Vcl.Menus,
  D2BridgeFormTemplate,

  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.FB,
  FireDAC.Phys.FBDef,
  FireDAC.VCLUI.Wait,
  FireDAC.Phys.IBBase,
  Data.DB,
  FireDAC.Comp.Client,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Comp.DataSet,

  D2Bridge.Forms;

type
  TForm1 = class(TD2BridgeForm)
    MainMenu1: TMainMenu;
    Module11: TMenuItem;
    AppModule21: TMenuItem;
    Cliente1: TMenuItem;
    Ativos1: TMenuItem;
    Contratos1: TMenuItem;
    Clientes2: TMenuItem;
    odosContratosdoCliente1: TMenuItem;
    ContratoporID1: TMenuItem;
    FormasdePagamento1: TMenuItem;
    Contratos2: TMenuItem;
    AtivosdoContrato1: TMenuItem;
    N1: TMenuItem;
    Contratos3: TMenuItem;
    Listagemcontratosativos1: TMenuItem;
    Listagemcontratosinativos1: TMenuItem;
    ListagememAberto1: TMenuItem;
    Agendamendo1: TMenuItem;
    procedure Module11Click(Sender: TObject);
    procedure Clientes1Click(Sender: TObject);
    procedure Cliente1Click(Sender: TObject);
  private

  public
    procedure HabilitarItemMenu(const NomeTela: string);
    procedure ExportarListaDeTelas;
    procedure ResetarMenus;
    function RemoverAcentos(const Texto: string): string;

  protected
    procedure ExportD2Bridge; override;
    procedure InitControlsD2Bridge(const PrismControl: TPrismControl); override;
    procedure RenderD2Bridge(const PrismControl: TPrismControl;
      var HTMLControl: string); override;
  end;

Function Form1: TForm1;

implementation

Uses
  ContratosWebApp, uView.Clientes, uDM;

Function Form1: TForm1;
begin
  Result := TForm1(TForm1.GetInstance);
end;

{$R *.dfm}
{ TForm1 }

procedure TForm1.Cliente1Click(Sender: TObject);
begin
  if FrmClientes = nil then
    TFrmClientes.CreateInstance;

  FrmClientes.ShowModal;
end;

procedure TForm1.Clientes1Click(Sender: TObject);
begin
  if FrmClientes = nil then
    TFrmClientes.CreateInstance;

  FrmClientes.ShowModal;
end;

procedure TForm1.ExportarListaDeTelas;
var
  i, j: Integer;
  Lista: TStringList;
  QryCheck: TFDQuery;
  NomeTela: string;
  NomePadronizado: string;
  PerfilID: Integer;
begin
  Lista := TStringList.Create;
  QryCheck := TFDQuery.Create(nil);
  try
    QryCheck.Connection := DM.Conn;
    PerfilID := DM.PerfilID; // ID do perfil logado

    Lista.Add('Menus disponíveis e verificação de permissões:');
    Lista.Add('');

    for i := 0 to MainMenu1.Items.Count - 1 do
    begin
      NomeTela := MainMenu1.Items[i].Caption;
      NomePadronizado := RemoverAcentos(Trim(NomeTela));
      Lista.Add(NomeTela);

      // Verifica se essa tela existe na tabela PERMISSOES
      QryCheck.SQL.Text := 'SELECT COUNT(*) FROM PERMISSOES ' +
        'WHERE ID_PERFIL = :ID AND TRIM(NOME_TELA) = :TELA AND PODE_ACESSAR = TRUE';
      QryCheck.ParamByName('ID').AsInteger := PerfilID;
      QryCheck.ParamByName('TELA').AsString := NomePadronizado;
      QryCheck.Open;

      if QryCheck.Fields[0].AsInteger = 0 then
        Lista.Add('    ❌ Sem permissão cadastrada');

      for j := 0 to MainMenu1.Items[i].Count - 1 do
      begin
        NomeTela := MainMenu1.Items[i].Items[j].Caption;
        NomePadronizado := RemoverAcentos(Trim(NomeTela));
        // 🔄 faltava atualizar aqui!
        Lista.Add('  - ' + NomeTela);

        QryCheck.ParamByName('TELA').AsString := NomePadronizado;
        QryCheck.Open;

        if QryCheck.Fields[0].AsInteger = 0 then
          Lista.Add('      ❌ Sem permissão cadastrada');
      end;

    end;

    Lista.SaveToFile('ListaDeTelas_Validada.txt');
    ShowMessage('Arquivo "ListaDeTelas_Validada.txt" foi gerado com sucesso!');
  finally
    QryCheck.Free;
    Lista.Free;

  end;
end;

procedure TForm1.ExportD2Bridge;
var
  imgLogo: TImage;

begin
  inherited;

  // Title:= 'Controle de Contratos';
  // SubTitle:= 'Controle de Contratos';

  D2Bridge.HTML.StyleSheets.Add
    ('<link rel="stylesheet" type="text/css" href="css/custom.css">');

  // TemplateClassForm:= TD2BridgeFormTemplate;

  D2Bridge.FrameworkExportType.TemplateMasterHTMLFile := '';
  // 'templates/master.html';
  D2Bridge.FrameworkExportType.TemplatePageHTMLFile := '';

  imgLogo := TImage.Create(Self);
  imgLogo.Picture.LoadFromFile('C:\FONTES\Colaborar\Resources\logo.png');
  imgLogo.Stretch := True;
  imgLogo.Width := 200;
  imgLogo.Height := 60;
  imgLogo.Transparent := True;
  imgLogo.Parent := Self;

  // Export yours Controls
  with D2Bridge.Items.Add do
  begin
    with Row.Items.Add do
    begin
      FormGroup('').AddVCLObj(imgLogo, 'logo-header');
    end;

    SideMenu(MainMenu1);

  end;
end;

procedure TForm1.HabilitarItemMenu(const NomeTela: string);
var
  i, j: Integer;
  NomeMenuItem: string;
begin
  ExportarListaDeTelas; // Ainda útil para validação

  for i := 0 to MainMenu1.Items.Count - 1 do
  begin
    NomeMenuItem := RemoverAcentos(Trim(MainMenu1.Items[i].Caption));

    if SameText(NomeMenuItem, RemoverAcentos(Trim(NomeTela))) then
    begin
      MainMenu1.Items[i].Enabled := True;
      MainMenu1.Items[i].Visible := True;
    end;

    for j := 0 to MainMenu1.Items[i].Count - 1 do
    begin
      NomeMenuItem := RemoverAcentos(Trim(MainMenu1.Items[i].Items[j].Caption));

      if SameText(NomeMenuItem, RemoverAcentos(Trim(NomeTela))) then
      begin
        MainMenu1.Items[i].Items[j].Enabled := True;
        MainMenu1.Items[i].Items[j].Visible := True;
      end;
    end;
  end;
end;

procedure TForm1.InitControlsD2Bridge(const PrismControl: TPrismControl);
begin
  inherited;

  // Menu example
  {
    if PrismControl.VCLComponent = MainMenu1 then
    PrismControl.AsMainMenu.Title:= 'AppTeste'; //or in SideMenu use asSideMenu

    if PrismControl.VCLComponent = MainMenu1 then
    PrismControl.AsMainMenu.Image.URL:='https://d2bridge.com.br/images/LogoD2BridgeTransp.png'; //or in SideMenu use asSideMenu

    //GroupIndex example
    if PrismControl.VCLComponent = MainMenu1 then
    with PrismControl.AsMainMenu do  //or in SideMenu use asSideMenu
    begin
    MenuGroups[0].Caption:= 'Principal';
    MenuGroups[1].Caption:= 'Services';
    MenuGroups[2].Caption:= 'Items';
    end;

    //Chance Icon and Propertys MODE 1 *Using MenuItem component
    PrismControl.AsMainMenu.MenuItemFromVCLComponent(Abrout1).Icon:= 'fa-solid fa-rocket';

    //Chance Icon and Propertys MODE 2 *Using MenuItem name
    PrismControl.AsMainMenu.MenuItemFromName('Abrout1').Icon:= 'fa-solid fa-rocket';
  }

  // Change Init Property of Prism Controls
  {
    if PrismControl.VCLComponent = Edit1 then
    PrismControl.AsEdit.DataType:= TPrismFieldType.PrismFieldTypeInteger;
  }
  if PrismControl.IsDBGrid then
  begin
    PrismControl.AsDBGrid.RecordsPerPage := 10;
    PrismControl.AsDBGrid.MaxRecords := 2000;
  end;

end;

procedure TForm1.Module11Click(Sender: TObject);
begin
  TD2BridgeForm(Session.PrimaryForm).Show;
end;

function TForm1.RemoverAcentos(const Texto: string): string;
const
  AComAcento = 'áàâãäéèêëíìîïóòôõöúùûüçÁÀÂÃÄÉÈÊËÍÌÎÏÓÒÔÕÖÚÙÛÜÇ';
  ASemAcento = 'aaaaaeeeeiiiiooooouuuucAAAAAEEEEIIIIOOOOOUUUUC';
var
  i, p: Integer;
  Resultado: string;
begin
  Resultado := Texto;
  for i := 1 to Length(Resultado) do
  begin
    p := Pos(Resultado[i], AComAcento);
    if p > 0 then
      Resultado[i] := ASemAcento[p];
  end;
  Result := Resultado;

end;

procedure TForm1.RenderD2Bridge(const PrismControl: TPrismControl;
  var HTMLControl: string);
begin
  inherited;

  // Exemplo: logar o HTML gerado no console ou salvar num arquivo
  // OutputDebugString(PChar('HTML gerado: ' + HTMLControl));

  // Intercept HTML
  {
    if PrismControl.VCLComponent = Edit1 then
    begin
    HTMLControl:= '</>';
    end;
  }
end;

procedure TForm1.ResetarMenus;
var
  i, j: Integer;
begin
  for i := 0 to MainMenu1.Items.Count - 1 do
  begin
    MainMenu1.Items[i].Enabled := False;
    // MainMenu1.Items[i].Visible := False;

    for j := 0 to MainMenu1.Items[i].Count - 1 do
    begin
      MainMenu1.Items[i].Items[j].Enabled := False;
      // MainMenu1.Items[i].Items[j].Visible := False;
    end;
  end;

end;

end.
